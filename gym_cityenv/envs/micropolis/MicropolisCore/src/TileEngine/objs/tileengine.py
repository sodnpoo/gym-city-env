# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_tileengine')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_tileengine')
    _tileengine = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_tileengine', [dirname(__file__)])
        except ImportError:
            import _tileengine
            return _tileengine
        try:
            _mod = imp.load_module('_tileengine', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _tileengine = swig_import_helper()
    del swig_import_helper
else:
    import _tileengine
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

TILEENGINE_VERSION = _tileengine.TILEENGINE_VERSION
TILE_FORMAT_BYTE_SIGNED = _tileengine.TILE_FORMAT_BYTE_SIGNED
TILE_FORMAT_BYTE_UNSIGNED = _tileengine.TILE_FORMAT_BYTE_UNSIGNED
TILE_FORMAT_SHORT_SIGNED = _tileengine.TILE_FORMAT_SHORT_SIGNED
TILE_FORMAT_SHORT_UNSIGNED = _tileengine.TILE_FORMAT_SHORT_UNSIGNED
TILE_FORMAT_LONG_SIGNED = _tileengine.TILE_FORMAT_LONG_SIGNED
TILE_FORMAT_LONG_UNSIGNED = _tileengine.TILE_FORMAT_LONG_UNSIGNED
TILE_FORMAT_FLOAT = _tileengine.TILE_FORMAT_FLOAT
TILE_FORMAT_DOUBLE = _tileengine.TILE_FORMAT_DOUBLE
TILE_FORMAT_COUNT = _tileengine.TILE_FORMAT_COUNT
TILE_CODE_RAW_BINARY_16 = _tileengine.TILE_CODE_RAW_BINARY_16
TILE_CODE_COMPRESSED_TEXT = _tileengine.TILE_CODE_COMPRESSED_TEXT
TILE_CODE_COMPRESSED_BINARY_16 = _tileengine.TILE_CODE_COMPRESSED_BINARY_16
TILE_CODE_COUNT = _tileengine.TILE_CODE_COUNT
TILE_CODE_COMPRESSED_TEXT_SKIP_0 = _tileengine.TILE_CODE_COMPRESSED_TEXT_SKIP_0
TILE_CODE_COMPRESSED_TEXT_SKIP_1 = _tileengine.TILE_CODE_COMPRESSED_TEXT_SKIP_1
TILE_CODE_COMPRESSED_TEXT_SKIP_2 = _tileengine.TILE_CODE_COMPRESSED_TEXT_SKIP_2
TILE_CODE_COMPRESSED_TEXT_SKIP_3 = _tileengine.TILE_CODE_COMPRESSED_TEXT_SKIP_3
TILE_CODE_COMPRESSED_BINARY_16_SKIP_0 = _tileengine.TILE_CODE_COMPRESSED_BINARY_16_SKIP_0
TILE_CODE_COMPRESSED_BINARY_16_SKIP_1 = _tileengine.TILE_CODE_COMPRESSED_BINARY_16_SKIP_1
TILE_CODE_COMPRESSED_BINARY_16_SKIP_2 = _tileengine.TILE_CODE_COMPRESSED_BINARY_16_SKIP_2
TILE_CODE_COMPRESSED_BINARY_16_HIGH_MAX = _tileengine.TILE_CODE_COMPRESSED_BINARY_16_HIGH_MAX
class TileEngine(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TileEngine, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TileEngine, name)
    __repr__ = _swig_repr
    __swig_setmethods__["width"] = _tileengine.TileEngine_width_set
    __swig_getmethods__["width"] = _tileengine.TileEngine_width_get
    if _newclass:
        width = _swig_property(_tileengine.TileEngine_width_get, _tileengine.TileEngine_width_set)
    __swig_setmethods__["height"] = _tileengine.TileEngine_height_set
    __swig_getmethods__["height"] = _tileengine.TileEngine_height_get
    if _newclass:
        height = _swig_property(_tileengine.TileEngine_height_get, _tileengine.TileEngine_height_set)
    __swig_setmethods__["bufData"] = _tileengine.TileEngine_bufData_set
    __swig_getmethods__["bufData"] = _tileengine.TileEngine_bufData_get
    if _newclass:
        bufData = _swig_property(_tileengine.TileEngine_bufData_get, _tileengine.TileEngine_bufData_set)
    __swig_setmethods__["colBytes"] = _tileengine.TileEngine_colBytes_set
    __swig_getmethods__["colBytes"] = _tileengine.TileEngine_colBytes_get
    if _newclass:
        colBytes = _swig_property(_tileengine.TileEngine_colBytes_get, _tileengine.TileEngine_colBytes_set)
    __swig_setmethods__["rowBytes"] = _tileengine.TileEngine_rowBytes_set
    __swig_getmethods__["rowBytes"] = _tileengine.TileEngine_rowBytes_get
    if _newclass:
        rowBytes = _swig_property(_tileengine.TileEngine_rowBytes_get, _tileengine.TileEngine_rowBytes_set)
    __swig_setmethods__["tileFormat"] = _tileengine.TileEngine_tileFormat_set
    __swig_getmethods__["tileFormat"] = _tileengine.TileEngine_tileFormat_get
    if _newclass:
        tileFormat = _swig_property(_tileengine.TileEngine_tileFormat_get, _tileengine.TileEngine_tileFormat_set)
    __swig_setmethods__["floatOffset"] = _tileengine.TileEngine_floatOffset_set
    __swig_getmethods__["floatOffset"] = _tileengine.TileEngine_floatOffset_get
    if _newclass:
        floatOffset = _swig_property(_tileengine.TileEngine_floatOffset_get, _tileengine.TileEngine_floatOffset_set)
    __swig_setmethods__["floatScale"] = _tileengine.TileEngine_floatScale_set
    __swig_getmethods__["floatScale"] = _tileengine.TileEngine_floatScale_get
    if _newclass:
        floatScale = _swig_property(_tileengine.TileEngine_floatScale_get, _tileengine.TileEngine_floatScale_set)
    __swig_setmethods__["tileShift"] = _tileengine.TileEngine_tileShift_set
    __swig_getmethods__["tileShift"] = _tileengine.TileEngine_tileShift_get
    if _newclass:
        tileShift = _swig_property(_tileengine.TileEngine_tileShift_get, _tileengine.TileEngine_tileShift_set)
    __swig_setmethods__["tileMask"] = _tileengine.TileEngine_tileMask_set
    __swig_getmethods__["tileMask"] = _tileengine.TileEngine_tileMask_get
    if _newclass:
        tileMask = _swig_property(_tileengine.TileEngine_tileMask_get, _tileengine.TileEngine_tileMask_set)

    def __init__(self):
        this = _tileengine.new_TileEngine()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _tileengine.delete_TileEngine
    __del__ = lambda self: None

    def setBuffer(self, buf: 'void *') -> "void":
        return _tileengine.TileEngine_setBuffer(self, buf)

    def getValue(self, col: 'int', row: 'int', tileFunction: 'PyObject *'=None, tileMapData: 'int const *'=None, tileMapCount: 'unsigned int'=0) -> "unsigned long":
        return _tileengine.TileEngine_getValue(self, col, row, tileFunction, tileMapData, tileMapCount)

    def renderTiles(self, ctx: 'cairo_t *', tilesSurf: 'cairo_surface_t *', tilesWidth: 'int', tilesHeight: 'int', tileFunction: 'PyObject *', tileMap: 'PyObject *', tileSize: 'int', renderCol: 'int', renderRow: 'int', renderCols: 'int', renderRows: 'int', alpha: 'double') -> "void":
        return _tileengine.TileEngine_renderTiles(self, ctx, tilesSurf, tilesWidth, tilesHeight, tileFunction, tileMap, tileSize, renderCol, renderRow, renderCols, renderRows, alpha)

    def renderTilesLazy(self, ctx: 'PyObject *', tileFunction: 'PyObject *', tileMap: 'PyObject *', tileSize: 'int', renderCol: 'int', renderRow: 'int', renderCols: 'int', renderRows: 'int', alpha: 'double', tileGenerator: 'PyObject *', tileCache: 'PyObject *', tileCacheSurfaces: 'PyObject *', tileState: 'PyObject *') -> "void":
        return _tileengine.TileEngine_renderTilesLazy(self, ctx, tileFunction, tileMap, tileSize, renderCol, renderRow, renderCols, renderRows, alpha, tileGenerator, tileCache, tileCacheSurfaces, tileState)

    def renderPixels(self, destSurf: 'cairo_surface_t *', cmapSurf: 'cairo_surface_t *', tileFunction: 'PyObject *', tileMap: 'PyObject *', renderCol: 'int', renderRow: 'int', renderCols: 'int', renderRows: 'int') -> "void":
        return _tileengine.TileEngine_renderPixels(self, destSurf, cmapSurf, tileFunction, tileMap, renderCol, renderRow, renderCols, renderRows)

    def getTileData(self, tileFunction: 'PyObject *', tileMap: 'PyObject *', col: 'int', row: 'int', cols: 'int', rows: 'int', code: 'int', tileViewCache: 'PyObject *') -> "PyObject *":
        return _tileengine.TileEngine_getTileData(self, tileFunction, tileMap, col, row, cols, rows, code, tileViewCache)
TileEngine_swigregister = _tileengine.TileEngine_swigregister
TileEngine_swigregister(TileEngine)

# This file is compatible with both classic and new-style classes.


